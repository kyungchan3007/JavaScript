// 하나의 값을 저장하기 위한 수단이다.
const userId = 1;
const userName = "lee";

// 객체나 배열 같은 구조를 사용하려면 여러개의값을 하나로 그룹화 해서 하나의 값처럼 사용할수 있다.
const user = { id: 1, name: "lee" };
const users = [
  { id: 1, name: "lee" },
  { id: 2, name: "kim" },
];

/*
메모리 공간에 저장된 값을 식별할수 있는 고유한 이름을 변수 이름 이라고 한다. 
위 코드 에서 userId , userName, user, users 가 변수이름이다.
그리고 변수에 저장된 값을 변수값이라고 한다.
변수에 값을 저장하는것을 할당(대입,저장) 이라고 하고 변수에 저장된 값을 읽어 들이는 것을 참조라 한다.
*/

/*
변수선언
ES6 에서 let, const 키워드가 도입되기전까지 var 키워드는 자바스크립트에서 변수를 선언할수 있는 유일한 키워드였다.
var 키워드는 여러 단점이 있다. var 키워드의 여러단점중에서 가장 대표적인 것이 블록 레벨 스코프 를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다.
이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.
*/

/*
undefined
프로젝트를 하면서 많이봤던 undefined !! 자바스크립트에서 제공하는 원시타입의 값이다.변수를 선언한 이후 값을 할당하지 않게 되면
자바스크립트 엔진에 의해 undifined 라는 값이 암묵적으로 할당되어 초기화된다.
*/
console.log(score);
var score;
/*
    변수 선언문보다 참조하는 코드가 앞에 있게되면 자바스크립트 엔진에 의해 한줄씩 순차적으로 실행되므로 console.log 가 먼저 실행되고
    순차적으로 다음코드가 실행되기 때문에 score라는 변수선언이 실행되 않았다. 그러므로 참조에러가 발생할수 있으나 undifined가 출력된다.
    그 이유는 변수 선언이 소스코드가 한줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.
*/
